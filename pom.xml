<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
  http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.mindtree.awsfinalpresentation.controller</groupId>
	<artifactId>VehiclePresentation</artifactId>
	<packaging>war</packaging>
	<version>1.6.7</version>
	<name>${project.artifactId}</name>
	<pluginRepositories>
	<pluginRepository>
        <id>sonatype-oss-snapshots</id>
        <name>Sonatype OSS Snapshots</name>
        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
  </pluginRepository>
  </pluginRepositories>
	<properties>
		<org.springframework.version>3.2.1.RELEASE</org.springframework.version>
		<hibernate.version>3.6.10.FINAl</hibernate.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 		<maven.compiler.source>1.7</maven.compiler.source>
        	<maven.compiler.target>1.7</maven.compiler.target>
	</properties>
	<dependencies>

		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.1</version>
		</dependency>

		<!-- Log4j dependency -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>


		<!-- JSTL dependency -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>compile</scope>
		</dependency>

		<!-- Servlet API -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.12.1.GA</version>
		</dependency>

		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>

		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk</artifactId>
			<version>1.4.1</version>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>com.sun.jersey.contribs.jersey-oauth</groupId>
			<artifactId>oauth-client</artifactId>
			<version>1.17.1</version>
		</dependency>


		<!-- Core utilities used by other modules. Define this if you use Spring 
			Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Expression Language (depends on spring-core) Define this if you use 
			Spring Expression APIs (org.springframework.expression.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
			this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, 
			spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
			spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Various Application Context utilities, including EhCache, JavaMail, 
			Quartz, and Freemarker integration Define this if you need any of these integrations -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
			spring-aop, spring-context) Define this if you use Spring Transactions or 
			DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, 
			spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, 
			JiBX, Castor, XStream, and XML Beans. (depends on spring-core, spring-beans, 
			spring-context) Define this if you need OXM (org.springframework.oxm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Web application development utilities applicable to both Servlet and 
			Portlet Environments (depends on spring-core, spring-beans, spring-context) 
			Define this if you use Spring MVC, or wish to use Struts, JSF, or another 
			web framework with Spring (org.springframework.web.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Servlet 
			Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Portlet 
			Container (org.springframework.web.portlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc-portlet</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Support for testing Spring applications with tools such as JUnit and 
			TestNG This artifact is generally always defined with a 'test' scope for 
			the integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<webResources>
						<resource>
							<!-- this is relative to the pom.xml directory -->
							<directory>src/main/webapp/WEB-INF</directory>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<!--
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<configuration>
					<container>
						<containerId>tomcat7x</containerId>
						<type>remote</type>
					</container>
					<configuration>
						<type>runtime</type>
						<properties>
							<cargo.server.settings>tomcat7_local</cargo.server.settings>
						</properties>
					</configuration>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>com.mindtree.maven</groupId>
				<artifactId>amazon-maven-plugin</artifactId>
				<version>0.0.1</version>
				<configuration>
					<secretKey>${secret.key}</secretKey>
					<accessKey>${access.key}</accessKey>
					<proxyHost>${proxyHost}</proxyHost>
					<proxyPort>${proxyPort}</proxyPort>
					<buckets>
						<property>
							<name>vikesh-vehicle-rental/presentation/${project.version}</name>
							<value>**/target/*.war;public-read</value>
						</property>
					</buckets>
				</configuration>
			</plugin>

			
			-->
			<!-- 
			Spotify Plugin commented	
			<plugin>
			      <groupId>com.spotify</groupId>
			      <artifactId>docker-maven-plugin</artifactId>
			      <version>0.1.0</version>
			      <configuration>
				<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
				<imageName>jayaram/mtw-vr-prsentation:${project.version}</imageName>
				<image>${project.artifactId}</image>
				<newName>jayaram/mtw-vr-prsentation:${project.version}</newName>
				<resources>
				   <resource>
				     <targetPath>/</targetPath>
				     <directory>${project.build.directory}</directory>
				     <include>${project.build.finalName}.war</include>
				   </resource>
				</resources>
			      </configuration>
			</plugin>
			-->
			 <plugin>
			    <groupId>net.wouterdanes.docker</groupId>
			    <artifactId>docker-maven-plugin</artifactId>
			    <version>3.1-SNAPSHOT</version>
			   	<executions>
				<execution>
				<id>build</id>
				<goals>
				  <goal>build-images</goal>
				</goals>
				<configuration>
				  <images>
				    <image>
				      <id>${project.artifactId}</id>
				      <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>
					<keep>true</keep>
					 <artifacts>
						<artifact>
						  <file>${project.basedir}/target/${project.artifactId}.war</file>
						</artifact>
						<artifact>
						  <file>${project.basedir}/src/main/docker/start_up.sh</file>
						</artifact>
					      </artifacts>
					<nameAndTag>vraja0106/mt-mvn-vr-presentation:${project.version}</nameAndTag>
					<!--<registry>registry.hub.docker.com</registry>-->
					<push>true</push>
				    </image>
				  </images>
				</configuration>
			      </execution> 
				<execution>
					<id>tag</id>
					<goals>
					  <goal>tag-images</goal>
					</goals>
					<configuration>
					  <images>
					    <image>
					      <id>${project.artifactId}</id>
					      <tags>
						<tag>vraja0106/mt-mvn-vr-presentation:latest</tag>
					      </tags>
						<push>true</push>
					    </image>
					  </images>
					</configuration>
				      </execution>
					  <execution>
						    <id>push</id>
						    <goals>
						      <goal>push-images</goal>
						    </goals>
						  </execution>
				</executions>
			</plugin>
<plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.1</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.3.1</version>
        <executions>
          <execution>
            <id>enforce-maven-version</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>@maven.required.version@</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
		</plugins>
		<finalName>${project.artifactId}</finalName>
	</build>
</project>
